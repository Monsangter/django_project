한페이지에 담을 최대의 질문 목록 개수를 페이징을 적용해 해결해보자.

=====
대량 테스트 데이터 만들기

장고셸을 이용하는게 가장 좋은 방법이다.

(mysite) c:\projects\mysite>python manage.py shell

>>> from pybo.models import Question
>>> from django.utils import timezone

>>> for i in range(300):
...     q = Question(subject='테스트 데이터입니다:[%03d]' % i, content='내용무', create_date=timezone.now())
...     q.save()

========
paginator

장고에서 페이징을 위해 사용하는 클래스는 paginator 이다. 이 클래스를 사용해 다음과 같이 index 함수에 페이징 기능을 적용해보자.

[파일명: projects\mysite\pybo\views.py]

from django.core.paginator import Paginator  

def index(request):
    page = request.GET.get('page', '1')  # 페이지
    question_list = Question.objects.order_by('-create_date')
    paginator = Paginator(question_list, 10)  # 페이지당 10개씩 보여주기
    page_obj = paginator.get_page(page)
    context = {'question_list': page_obj}
    return render(request, 'pybo/question_list.html', context)
    
인덱스 함수에 페이징 기능을 적용해보자.

page = request.GET.get('page', '1')은 http://localhost:8000/pybo/?page=1 처럼 GET 방식으로 호출된 URL에서 page값을 가져올 때 사용한다.
만약 http://localhost:8000/pybo/ 처럼 page값 없이 호출된 경우에는 디폴트로 1이라는 값을 설정한다.

그리고 Paginator 클래스를 다음처럼 사용했다.
paginator = Paginator(question_list, 10) # 페이지당 10개씩 보여 주기
첫 번째 파라미터 question_list는 게시물 전체를 의미하는 데이터이고 두번째 파라미터 10은 페이지당 보여줄 게시물의 개수이다.

page_obj = paginator.get_page(page)
요청된 페이지(page)에 해당되는 페이징 객체(page_obj)를 생성했다. 
이렇게 하면 장고 내부적으로는 데이터 전체를 조회하지 않고 해당 페이지의 데이터만 조회하도록 쿼리가 변경된다.

=====
템플릿에 페이징 적용하기

index pybo/question_list.html)에 전달한 데이터(context)는 다음과 같다.

context = {'question_list': page_obj}  # question_list는 페이징 객체(page_obj)
return render(request, 'pybo/question_list.html', context)

따라서 질문 목록 템플릿에 전달된 페이징 객체는 question_list이다. 
이제 페이징 객체인 question_list를 이용하여 템플릿에서 어떻게 페이징을 처리할수 있는지 알아보자.

[파일명: projects\mysite\templates\pybo\question_list.html]

    <!-- 페이징처리 시작 -->
    <ul class="pagination justify-content-center">
        <!-- 이전페이지 -->
        {% if question_list.has_previous %}
        <li class="page-item">
            <a class="page-link" href="?page={{ question_list.previous_page_number }}">이전</a>
        </li>
        {% else %}
        <li class="page-item disabled">
            <a class="page-link" tabindex="-1" aria-disabled="true" href="#">이전</a>
        </li>
        {% endif %}
        <!-- 페이지리스트 -->
        {% for page_number in question_list.paginator.page_range %}
        {% if page_number == question_list.number %}
        <li class="page-item active" aria-current="page">
            <a class="page-link" href="?page={{ page_number }}">{{ page_number }}</a>
        </li>
        {% else %}
        <li class="page-item">
            <a class="page-link" href="?page={{ page_number }}">{{ page_number }}</a>
        </li>
        {% endif %}
        {% endfor %}
        <!-- 다음페이지 -->
        {% if question_list.has_next %}
        <li class="page-item">
            <a class="page-link" href="?page={{ question_list.next_page_number }}">다음</a>
        </li>
        {% else %}
        <li class="page-item disabled">
            <a class="page-link" tabindex="-1" aria-disabled="true" href="#">다음</a>
        </li>
        {% endif %}
    </ul>
    <!-- 페이징처리 끝 -->
    
이전 페이지가 있는 경우에는 "이전" 링크가 활성화되게 하였고 이전 페이지가 없는 경우에는 "이전" 링크가 비활성화되도록 하였다. 
(다음페이지의 경우도 마찬가지 방법으로 적용되었다.)

g


