삭제 기능 구현

1. delete 버튼 만들기.

def HTMLTemplate(articleTag):
	global topics
	ol = ‘’
	for topic in topics:
		ol += f’<li><a href=“/read/{topic[“id”]}”>{topic[“title”]}</a></li>’
	return f’’’
	<html>
	<body>
		<h1><a href=“/“>django</a></h1>
		<ol>
			{ol}
		</ol>
		{articleTag}
		<ul>
			<li><a href=“/create/“>create</a></li>
			<li>delete</li>
		</ul>
	</body>
	</html>
	‘’’

버튼을 누르자마자 서버에 데이터를 변경하는 작업을 할 것이다. 이때는 get , link를 쓰면 안된다,
post를 써야 한다. 그리고 post 는 form에서 가능.

		<ul>
			<li><a href=“/create/“>create</a></li>
			<li>
				<form action=“/delete/“ method = “post”>
					<input type=“submit” value=“delete”>
				</form>
			</li>
		</ul>

삭제시에는 생성 돼 있는 글의 id 가 필요하다. 

read( 읽기 페이지) 에서 두번째 인자로 있는 id를 
HttpResponse(HTMLTemplate(article, id))으로 두번쨰 인자에서 id를 받아준다.

이후 html template함수를 수정해 두번째 인자로 id를 받게 수정 해줘야하는데 , 두번째 인자를 전달하지 않고 html함수를 사용하는 다른 함수들은 에러가 된다. 따라서 id=None으로 두번쨰 인자를 받도록 수정한다. 그럼 없는 경우에는 none으로
기본 값을 줬기 때문에 에러가 안난다.

이렇게 받아온 데이터는 
<input type = “hidden” name=“id” value = {id}> 를 통해 전송한다. 눈에는 안보이지만 값을 전송해주는 타입이다.

그리고 url에 path 추가

	path(‘delete/‘, views.delete)

이후 delete 함수 만들기

def delete(request):
	global topics 
	if request.method == ‘POST’:
		id = request.POST[‘id’]
		newTopics =[]
		for topic in topics:
			if topic[‘id’] != int(id):
				newTopics.append(topic)
		topics = new topics
		return redirect(‘/‘)
		print(‘id’,id)

이후 id 가 none이 아닐때만 표시해주는 방식으로 상세 페이지에서만 버튼이 활성화 하게 할 수 있다. 
htmltemplate 수정.

contextUI = ‘’
if id != None:
	contextUI = f’’’
		<li>
			<form action=“/delete/“ method =“post”>
				<input type=“hidden” name=“id” value={id}>
				<input type=“hidden” name=“id” value={id}>
			</form>
		</li>
		<li><a href=“/update/{id}“>update</a></li>
	‘’’

==============
