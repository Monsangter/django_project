장고의 로그인, 로그아웃을 도와주는 앱은 django.contrib.auth 이다. 이 앱은 장고 프로젝트 생성시 다음처럼 자동으로 추가된다.

[projects\mysite\config\settings.py]

INSTALLED_APPS = [
    (... 생략 ...)
    'django.contrib.auth',
    (... 생략 ...)
]

이렇게 나와 있다.

이 앱을 사용하면, 로그인과 로그아웃 기능을 정말 쉽게 구현할 수 있다.

===============

common 앱

하나의 웹사이트에는 파이보 같은 게시판 서비스 웨에도 , 블로그나 쇼핑몰같은 굵직한 단위의 앱들이 함꼐 있을 수 있기 떄문에,
로그인 기능을 파이보 게시판 서비스에 종속 시키기 보다는 common 앱에 구현할 것이다.

django-admin startapp common 을 웹페이지 루트디렉토리에서 하면 pyㅠo 앱과 동일한 구조를 가진 common 앱이 생성된다.

생성된 앱을 config/settigs.py 에 등록한다.

INSTALLED_APPS = [
    'common.apps.CommonConfig',  
    
    
    
이어서 common 앱의 urls.py 파일을 사용하기 위해 config/urls.py 파일을 다음과 같이 수정하자.

[파일명: projects\mysite\config\urls.py]

from django.contrib import admin
from django.urls import path, include


urlpatterns = [
    path('admin/', admin.site.urls),
    path('pybo/', include('pybo.urls')),
    path('common/', include('common.urls')),
]

이제 http://localhost:8000/common/ 으로 시작하는 URL은 모두 common/urls.py 파일을 참조할 것이다.

=========
로그인

로그인 화면으로 진입할 수 있도록 templates/navbar.html 파일의 '로그인' 링크를 다음처럼 수정하자.

[파일명: projects\mysite\templates\navbar.html]

    <li class="nav-item ">
        <a class="nav-link" href="{% url 'common:login' %}">로그인</a>
    </li>
    
------로그인 뷰

navbar.html 파일에서 템플릿 태그로 {% url 'common:login' %}를 사용했으므로 common/urls.py 파일에 다음과 같은 URL 매핑 규칙을 추가


from django.urls import path
from django.contrib.auth import views as auth_views

urlpatterns = [
    path('login/', auth_views.LoginView.as_view(), name='login'),
]

로그인 뷰는 따로 만들 필요없이 위 코드처럼 django.contrib.auth 앱의 LoginView를 사용하도록 설정

------로그인 템플릿

앞에서 사용한 LoginView는 registration이라는 템플릿 디렉터리에서 login.html 파일을 찾는다.
registration 디렉터리에 login.html 파일이 없음을 의미한다.
파일을 찾지 못해 오류가 발생한 것이다. 이 오류를 해결하려면 registration/login.html 템플릿 파일을 작성해야 한다.
common/urls.py 파일을 다음과 같이 수정하자.

urlpatterns = [
    path('login/', auth_views.LoginView.as_view(template_name='common/login.html'), name='login'),
]
[파일명: projects\mysite\common\urls.py]
    
와 같이 수정하면 이제 registration 디렉터리가 아닌 common 디렉터리에서 login.html 파일을 참조하게 된다.

이제 common/login.html 파일을 생성하기 위해 common 템플릿 디렉터리를 다음과 같이 생성하자.

그리고 common 템플릿 디렉터리에 login.html 템플릿을 다음과 같이 작성하자.



c:\projects\mysite\templates>mkdir common

[파일명: projects\mysite\templates\common\login.html]

{% extends "base.html" %}
{% block content %}
<div class="container my-3">
    <form method="post" action="{% url 'common:login' %}">
        {% csrf_token %}
        {% include "form_errors.html" %}
        <div class="mb-3">
            <label for="username">사용자ID</label>
            <input type="text" class="form-control" name="username" id="username"
                   value="{{ form.username.value|default_if_none:'' }}">
        </div>
        <div class="mb-3">
            <label for="password">비밀번호</label>
            <input type="password" class="form-control" name="password" id="password"
                   value="{{ form.password.value|default_if_none:'' }}">
        </div>
        <button type="submit" class="btn btn-primary">로그인</button>
    </form>
</div>
{% endblock %}

[django.contrib.auth 인증시 다음 2개의 항목은 반드시 필요하다]

username - 사용자명
password - 비밀번호
    
그리고 {% csrf_token %} 바로 밑에 include 태그로 포함된 form_errors.html 템플릿 파일은 다음과 같이 작성하자.

[파일명: projects\mysite\templates\form_errors.html]

<!-- 필드 오류와 넌필드 오류를 출력한다. -->
{% if form.errors %}
<div class="alert alert-danger">
    {% for field in form %}
    <!-- 필드 오류 -->
    {% if field.errors %}
    <div>
        <strong>{{ field.label }}</strong>
        {{ field.errors }}
    </div>
    {% endif %}
    {% endfor %}
    <!-- 넌필드 오류 -->
    {% for error in form.non_field_errors %}
    <div>
        <strong>{{ error }}</strong>
    </div>
    {% endfor %}
</div>
{% endif %}

폼 오류에는 다음과 같이 두 가지 종류의 오류가 있다.

필드 오류 (field.errors)
넌필드 오류 (form.non_field_errors)

필드 오류는 사용자가 입력한 필드 값에 대한 오류로 값이 누락되었거나 필드의 형식이 일치하지 않는 경우에 발생하는 오류이다.
넌필드 오류는 필드의 값과는 상관없이 다른 이유로 발생하는 오류이다.
 form_errors.html 템플릿은 필드 오류와 넌필드 오류 모두를 표시하기 위해 삽입되는 템플릿이다.
 
 ------
 question_form.html, question_detail.html 템플릿에서 오류를 표시하기 위해 추가했던 
 HTML코드를 {% include "form_errors.html" %} 으로 대체해도 좋다.
 
 ----fㅗ그인 수행
 
 입력값을 누락하거나 엉뚱한 값으로 로그인 시도 하면 오류메시지가 표시될 것이다.
 현재 이용가능한 사용자는 슈퍼유저 뿐인데 로그인에 성공해도 오류가 뜬다. 
 django.contrib.auth 패키지는 디폴트로 /accounts/profile/ 이라는 URL로 이동시키기 때문이다.
 
 다만 /accounts/profile/ URL은 현재 우리가 파이보에 구성한 URL 구조와 맞지 않으므로 로그인 성공 시 / 페이지로 이동할 수 있도록 
 config/settings.py 파일을 수정한다.
 
 [파일명: projects\mysite\config\settings.py]

(... 생략 ...)

# 로그인 성공후 이동하는 URL
LOGIN_REDIRECT_URL = '/'

/ 페이지는 기본 URL인 http://localhost:8000/ 페이지를 의미한다.

또 오류가 발생하는데 /를 의미하는 http://localhost:8000/ 페이지에 대한 URL 매핑 규칙을 작성하지 않았기 때문이다.

이제 config/urls.py 파일에 / 페이지에 대응하는 URL 매핑 규칙을 추가하자.

[파일명: C:\projects\mysite\config\urls.py]

from pybo import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('pybo/', include('pybo.urls')),
    path('common/', include('common.urls')),
    path('', views.index, name='index'),  # '/' 에 해당되는 path
]
 페이지 요청에 대해 path('', views.index, name='index')가 작동하여 pybo/views.py 파일의 index 함수가 실행된다.
==========

로그아웃

로그인에 실행하고도 여진히 로그인 링크가 계속 보인다. 로그아웃링크로 바뀌게 만들어야 한다.
navbar.html 템플릿 파일에서 로그인 링크 부분을 다음과 같이 수정하자.

[파일명: projects\mysite\templates\navbar.html]

<li class="nav-item">
    {% if user.is_authenticated %}
    <a class="nav-link" href="{% url 'common:logout' %}">{{ user.username }} (로그아웃)</a>
    {% else %}
    <a class="nav-link" href="{% url 'common:login' %}">로그인</a>
    {% endif %}
</li>

{% if user.is_authenticated %} 은 현재 사용자가 로그인 되었는지를 판별한다. 
로그인 상태에서는 로그아웃 링크에 사용자명 {{ user.username }}도 추가로 표시했다.

-----
템플릿에서 User tㅏ용하기

뷰함수에서 템플릿에 User 객체를 전달하지 않더라도 템플릿에서는 django.contrib.auth 기능으로 인해 User 객체를 사용할 수 있다.
user.is_authenticated
user.is_anonymous
user.username
user.is_superuser

{% url 'common:logout' %}에 대응하는 URL 매핑을 common/urls.py 파일에 추가해야 한다.
path('logout/', auth_views.LogoutView.as_view(), name='logout'),

그리고 로그아웃 시 리다이렉트할 위치도 config/settings.py 파일에 추가하자.

# 로그아웃시 이동하는 URL
LOGOUT_REDIRECT_URL = '/'
