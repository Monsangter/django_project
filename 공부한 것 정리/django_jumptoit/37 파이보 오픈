서버생성과 ssh 연결이 끝났다.
파이보를 서버에 설치하고 사용하기 위해 준비하는 과정이 필요.

=====
서버에 접속하여 필요한 도구 설치하기

서버접속

ssh 클라이언트 프로그램(mobaXterm, 맥터미널)을 통해 서버에 접속한다.

----hostname 변경하기

초기 프롬프트는 ubunto@ip-xxx-xx-x-xx:~$ 이런식으로 나타난다.

sudo hostnamectl set-hostname [호스트명]

호스트명을 수정한 뒤에는 리붓 해줘야 한다.

sudo reboot

이제 변경된 호스트명이 출력된다.

----서버 시간 설정하기

터미널에서 date 명령을 사용해 보자. 그러면 우리나라 시간이 아닌 UTC 시간이 출력된다.

파이보 게시물의 등록 시간을 우리나라 시간으로 맞추려면 설정을 바꿔야 한다.

sudo ln -sf /usr/share/zoneinfo/Asia/Seoul /etc/localtime

다시 date 명령을 수행하면 우리나라 시간으로 출력된다.

------파이썬 설치 확인

장고를 사용하려면 파이썬이 반드시 설치되어 있어야 한다.
서버에 파이썬이 설치되어 있는지 python 명령을 입력해 보자.

python3

------가상 환경 설치

가상 환경을 설치하기 전에 다음과 같이 sudo apt update 명령을 수행하여 우분투 패키지를 최신으로 업그레이드

sudo apt update

이어서 우분투에서 가상 환경을 사용할 수 있도록 'python3-venv' 패키지를 설치

sudo apt install python3-venv

홈 디렉터리 하위에  홈 디렉터리(/home/ubuntu) 하위에 파이보가 필요로 하는 projects, venvs 디렉터리를 생성

mkdir projects
mkdir venvs

cd venvs 이후
장고 가상환경 생성

python3 -m venv mysite

이후 가상환경 진입하고 cd mysite/bin
. activate

---wheel 패키지 설치

서버 환경에서는 pip으로 파이보 관련 패키지를 설치하면 wheel 패키지와 관련된 오류가 발생할 수 있다.

pip install wheel 명령으로 wheel 패키지를 먼저 설치

이후 장고와 마크다운 패키지 설치

pip install django==4.0.3
pip install markdown

======
파이보 설치

파이보 관련 파일은 깃허브 원격 저장소에 저장, 서버에서 깃을 이용하면 파이보 관련 파일을 쉽게 내려받을 수 있다.

---원격 레포지토리 파일 내려받기

cd ~/projects

방금 만들어둔 프로젝트 디렉토리로 이동.

파이보가 저장된 깃허브 원격저장소 URL 복사

git clone https://github.com/monsangter/pybo.git mysite #git clone [REPO_URL] [DIR]

맨뒤에 mysite 꼭 입력.

이후 서버의 projects 폴더에 mysite 디렉토리 생성됨.

----데이터 베이스 생성.

이제 다음처럼 mysite 디렉터리에 진입한 후 장고 서버를 실행
mysite) ubuntu@jumpto:~/projects$ cd mysite
(mysite) ubuntu@jumpto:~/projects/mysite$ python manage.py runserver

장고 서버는 실행되지만, python manage.py migrate 명령을 수행하라는 메시지를 볼 수 있다

왜냐하면 깃허브에는 .gitignore에 의해 db.sqlite3 파일이 저장되지 않았기 때문이다.

하지만 생성을 위한 파일은 서버에 존재하므로 , python manage.py migrate 명령만으로 데이터베이스를 생성할 수 있다.

----서버에서 migrate 운영하기

서버 환경에서는 makemigrations로 마이그레이션용 파일을 만들지 않는 것이 좋다
로컬서버에서 완성된 마이그레이션용 파일을 가지고 서버에서는 해당 파일을 확인후에 migrate만 수행

----장고 서버 실행
python manage.py runserver 0:8000 명령을 실행하여 장고 서버를 다시 구동하자

0:8000이라는 파라미터를 붙였다. 0:8000에서 0의 의미는 '외부에서 이 서버에 접속할 수 있도록 아이피를 개방한다'는 의미

=====
allowed_hosts

장고 서버를 실행하고 이제 웹 브라우저에서 http://[서버 인스턴스 고정ip]:8000 URL로 접속

오류가 뜨는데 장고 서버를 외부에 서비스 하려면 settings.py 파일의 allowed_host 항목을 반드시 설정해야 한다.

setting.py 파일 수정은 서버가 아닌 로컬 pc 에서 해야한다.

[파일명: projects\mysite\config\settings.py]

ALLOWED_HOSTS =[고정ip]

 이제 로컬에서 수정한 파일을 서버에 적용해야 한다

 git add *

 git commit -m "ALLOWED_HOSTS 변경"

 git push

 이제 aws 터미널로 다시 돌아와 git pull 명령으로 깃허브에서 변경된 내용을 가져온다.

git pull 명령 실행 시 여러분의 PC와 마찬가지로 깃허브 인증이 필요하다.
하지만 여러분의 PC와 마찬가지로 git config credential.helper store 명령을 수행하면 앞으로 인증 절차를 생략할 수 있다.

이제 서버에서 다시 장고 서버를 실행하면 로컬 피씨에서 사이트 접속이 가능하다.
