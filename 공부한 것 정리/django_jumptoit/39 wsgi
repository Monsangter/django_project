현재까지는 장고의 내장 서버를 구동했다.

장고 내장서버는 웹서버와 wsgi 서버 기능을 모두 포함하나,
기능이 단순하고 대량,동시 요청을 효율적으로 처리하지 못한다.

이번에는 운영 환경에서 웹서버와 wsgi 서버 구성법을 알아본다.

==== 웹브라우저

사용자는 파이보 시스템에 접속하기 위해
브라우저를 이용. 파이보에 접속한다.

이때 서버에 페이지를 요청함.

웹서버에 요청하는 페이지는 크게 두가지가 있다.

1.정적 페이지
2.동적 페이지


----정적페이지

웹 브라우저로 다음 url을 요청.

http://[고정아이피]/static/bootstrap.min.css

웹 브라우저 화면에 다음과 같은 내용이 그대로 출력될 것이다.

@charset "UTF-8";/*!
 * Bootstrap v5.1.3 (https://getbootstrap.com/)
 * Copyright 2011-2021 The Bootstrap Authors
 * Copyright 2011-2021 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
(... 생략 ...)

파이보 서버는 위와 같은 웹 브라우저의 요청을 받으면
서버의 /static/bootstrap.min.css 파일을 읽어서 리턴한다.

css,js,jpg,png 파일도 마찬가지이다. 이런 파일들을 정적 파일이라고 한다.

이런 정적파일 요청을 정적 페이지 요청이라고 한다.

----동적페이지

파이보 메인페이지를 요청한다면, 파이보 서버는 질문목록을 조회하여 리턴하는데,
질문목록은 데이터베이스 내용에 따라 바뀐다.

이를 동적페이지 요청이라 한다.

==== 웹서버

웹서버는 웹 브라우저의 정적 요청과 동적 요청을 처리하는데,

이런 웹서버에는 apache, nginx 등이 있다.
파이보는 장고와 가장 잘어울리는 엔진엑스를 웹서버로 사용한다.

정적 페이지는 그냥 정적파일을 불러오면 되니 편하다.

하지만 동적 페이지 요청은 복잡.

웹서버가 파이썬 프로그램을 호출해, 데이터베이스를 조회하여 리턴하는 등의
프로그램을 호출해야 하는데. 대부분의 웹서버는 파이썬 프로그램을 호출할
수 있는 기능이 없다.

따라서 wsgi(webserver gateway interface) 서버가 필요하다.
동적 요청이 발생하면 웹서버가 wsgi 서버를 호출하고
wsgi 에서 대신 파이썬 프로그램을 호출하여 동적 페이지 요청을 대신한다.
위스키

===wsgi 서버

위스키 서버에도 종류가 있는데 gunicorn, uwsgi 등이 있으나
여기선 u위스키 사용.

동적 페이지 요청시 웹서버는 위스키 서버 호출. 위스키 서버는 다시 위스키 어플
호출. 즉 최종적으로 위스키 어플이 동적 요청을 처리한다.
위스키 어플로는 바로 우리가 사용하는 장고, 플라스크이다.

위스키 서버는 웹서버와 위스키 어플 사이에 위치한다.
위스키 미들웨어, 컨테이너라고도 한다.

===위스키 어플

위스키 서버는 다음 파일을 경유하에 장고 프로그램을 호출한다.

projects\mysite\config\wsgi.py

==순서도

브라우저(크롬) - 웹서버(엔진엑스) - 동적요청 - wsgi서버(gunicorn) - wsgi 어플리케이션(장고) -db
                          - 정적요청. css,js,png,jpg




